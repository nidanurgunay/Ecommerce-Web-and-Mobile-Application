"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const generate_passcode_1 = require("@authentication/generate-passcode");
const speakeasy_1 = require("speakeasy");
const QRCode = require("qrcode");
const svgToDataURL = require('svg-to-dataurl');
/**
 * Generate a base32 encoded secret of 32 bytes
 */
function generateSecret() {
    return generate_passcode_1.default(32, generate_passcode_1.Encoding.base32);
}
exports.generateSecret = generateSecret;
function getQRCodeSVG(options) {
    const otpAuthURL = speakeasy_1.otpauthURL({
        encoding: 'base32',
        secret: options.secret,
        label: options.label,
        issuer: options.issuer
    });
    return new Promise((resolve, reject) => {
        QRCode.toString(otpAuthURL, { type: 'svg' }, (err, result) => {
            if (err) reject(err);else resolve(result);
        });
    });
}
exports.getQRCodeSVG = getQRCodeSVG;
function getQRCodeURI(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const svg = yield getQRCodeSVG(options);
        return svgToDataURL(svg);
    });
}
exports.getQRCodeURI = getQRCodeURI;
function verifyToken(options) {
    return speakeasy_1.totp.verify(Object.assign({ encoding: 'base32', window: 1 }, options));
}
exports.verifyToken = verifyToken;
function generateToken(options) {
    return speakeasy_1.totp(Object.assign({ encoding: 'base32' }, options));
}
exports.generateToken = generateToken;
//# sourceMappingURL=index.jsx.map